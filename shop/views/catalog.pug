head
    link(rel='stylesheet', type='text/css', href='/stylesheets/catalog.css')
body
    include mixins/snackbarMixin
    block content
        ul
            for category in categories
                li
                    button.category(type='button', value=category.name)= category.name
        #filterOptions
            each value, prop in filterProps
                - var filterId = prop + 'Filter'
                label.filterOption
                    = value.name + ': '
                    if value.type == filterTypes.text
                        input(id=filterId, type='text', name=prop, autocomplete='off')
                    else if value.type == filterTypes.dropdown
                        select(id=filterId, class="js-example-basic-single" name=prop)
                    else if value.type == filterTypes.multiDropdown
                        select(id=filterId, class="js-example-basic-multiple" name=prop, multiple="multiple") 
                    else if value.type == filterTypes.range
                        div(id=filterId, class='slider', name=prop)
                        
            button#filter Filter
        #catalogContent
            #productGrid
            div
                #cartList
                button#submitCart Create Order
        #orderInfo.modal
            .modal-content
                span.close Ã—
                form#orderInfoForm(action=publicRoutes.root.createOrder)
                    label(for='address') Address:
                    br
                    input(type='text', name='address', value=username)
                    br
                    label(for='name') Reciever Name: 
                    br
                    input(type='text', name='name', value=email)
                    br
                    ul.errors
                    input#placeOrder(type='submit', value='Submit')
        +snackbar()
    block scripts
        link(href='https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/13.1.4/nouislider.css', rel='stylesheet')
        script(src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/13.1.4/nouislider.js")
        link(href="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/css/select2.min.css" rel="stylesheet")
        script(type='text/javascript', charset='utf8', src="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/js/select2.min.js")
        script.
            var rootPublicRoutes = !{JSON.stringify(publicRoutes.root)};
            var filterTypes = !{JSON.stringify(filterTypes)};
            $(document).ready( function () {
                $('.js-example-basic-single').select2({
                    theme: "classic"
                });
                $('.js-example-basic-multiple').select2();
                var currentCategory = null;
                $('button.category').on('click', function(){
                    currentCategory = $(this).val();
                    filter({ category: $(this).val(), getPropInfo: true })
                });
                $('div.slider').each((idx, el) => {
                    noUiSlider.create($(el).get(0), {
                        start: [0, 0],
                        connect: true,
                        range:{
                            'min': 0,
                            'max': 1000,
                        },
                        tooltips: true
                    });
                })
                var filterHtmlTypes = {
                    'input': (obj) => obj.val(),
                    'div': (obj) => obj.get(0).noUiSlider.get().
                            map(e => parseInt(e)),
                    'select': (obj) => obj.val()
                }
                $('button#submitCart').on('click', function(){
                    var modal = $("#orderInfo")
                    modal.on('click', '.close', function(){ modal.css("display","none"); editId = null});
                    modal.css("display","block");
                });
                $('#orderInfoForm').on('submit', function(event){
                    var form = this
                    genericSubmitForm({paid: 1}, event, form, function (data){
                        refreshCart();
                        showSnackbar("Created order", true);
                    })
                });
                $('button#filter').on('click', function(){
                    var data = { category: currentCategory };
                    $('.filterOption').each((idx, el) => {
                        $.each(filterHtmlTypes, function(type, func){
                            var obj = $(el).children(type)
                            if(obj.length) {
                                data[obj.attr("name")] = func(obj);
                            }
                        })
                    });
                    filter(data);
                });
                function refreshCart(){
                    $('#cartList').empty();
                    $.ajax({
                        type: 'GET',
                        url: rootPublicRoutes.userCart,
                        success: function(data){
                            $.each(data['result'], function(_, el){
                                addToCart(el);
                            });
                        }
                    })
                }
                refreshCart();
                $('body').on('click', 'button.addToCart', function(){
                    $.ajax({
                        data: {productId: $(this).attr('productId')},
                        type: 'POST',
                        url: rootPublicRoutes.addToCart,
                        dataType: 'json',
                        success: function(data){
                            showSnackbar("Added to cart", true);
                            addToCart(data.result);
                        },
                        error: function(data){
                            errorHandle(data.responseJSON, null)
                        }
                    });
                });
                $('body').on('click', '[id^=Add]', function(){
                    var data = {productId: $(this).attr('id').substring(3), incr: 1};
                    changeQuantityCart(data);
                });
                $('body').on('click', '[id^=Sub]', function(){
                    var data = {productId: $(this).attr('id').substring(3), incr: -1};
                    changeQuantityCart(data);
                });
                $('body').on('click', '[id^=Del]', function(){
                    $.ajax({
                        data: {productId: $(this).attr('id').substring(3)},
                        type: 'POST',
                        url: rootPublicRoutes.deleteCartItem,
                        dataType: 'json',
                        success: function(data){
                            showSnackbar("Changed quantity", true);
                            addToCart(data.result[0]);
                        },
                        error: function(data){
                            errorHandle(data.responseJSON, null)
                        }
                    });
                });
                function changeQuantityCart(data){
                    $.ajax({
                        data: data,
                        type: 'POST',
                        url: rootPublicRoutes.cartChangeQuantity,
                        dataType: 'json',
                        success: function(data){
                            showSnackbar("Changed quantity", true);
                            addToCart(data.result[0]);
                        },
                        error: function(data){
                            errorHandle(data.responseJSON, null)
                        }
                    });
                }
                function fillQuantity(data){
                    return `Quantity: ${data.quantity}
                            <button id="Add${data.product_id}">+</button>
                            <button id="Sub${data.product_id}">-</button>
                            <button id="Del${data.product_id}">X</button>`
                }
                function addToCart(data){
                    if(data.id){
                        if($(`#${data.id}CartId`).length){
                            $(`#${data.product_id}Quantity`).html(`
                                ${fillQuantity(data)}`);
                            $(`#${data.product_id}Cost`).html(`
                                Cost: ${parseInt(data.price) * data.quantity}
                            `)
                        }else{
                            $('div#cartList').append(`<div id="${data.id}CartId" class='productListItem'>
                                <img src='/data/uploads/${data.product_id}.jpg' width="100" height="50" 
                                onerror="if (this.src != '/data/uploads/placeholder.jpg') this.src='/data/uploads/placeholder.jpg';">
                                <div id="${data.product_id}Name">Name: ${data.name}</div>
                                <div id="${data.product_id}Quantity">
                                    ${fillQuantity(data)}
                                </div>
                                <div id="${data.product_id}Cost">Cost: ${parseInt(data.price) * data.quantity}</div>
                            </div>`);
                        }
                    }else if(data.deleted_id){
                        $(`#${data.deleted_id}CartId`).remove();
                    }
                    
                }
                $('body').on('click', 'button.rateProduct', function(){
                    $.ajax({
                        data: {productId: $(this).attr('productId'), rating: $(this).siblings('input').val()},
                        type: 'POST',
                        url: rootPublicRoutes.rateProduct,
                        dataType: 'json',
                        success: function(data){
                            showSnackbar("Rated", true);
                        },
                        error: function(data){
                            errorHandle(data.responseJSON, null)
                        }
                    });
                });

                function filter(filterData){
                    $.ajax({
                        data: filterData,
                        type: 'POST',
                        url: rootPublicRoutes.filter,
                        dataType: 'json',
                        success: function(data){
                            showSnackbar("Filtered", true);
                            var container = $('#productGrid')
                            container.empty();
                            $.each(data['result'], function(_, value){
                                container.append(`<div class='gridElement' id="${value.id}GridElement">
                                    <img src='/data/uploads/${value.id}.jpg' width="200" height="100" 
                                    onerror="if (this.src != '/data/uploads/placeholder.jpg') this.src='/data/uploads/placeholder.jpg';">
                                    <button class="addToCart" productId=${value.id}> Add to cart </button>
                                    <div>Name: ${value.name}</div>
                                    <div>Manufacturer: ${value.manifacturer}</div>
                                    <div>Description: ${value.description}</div>
                                    <div>Cost: ${value.cost}</div>
                                    <div class="avgRating">Rating: ${value.product_rating ? Number.parseFloat(value.product_rating).toFixed(2) : "1.00"}</div>
                                    <div><input class="rating" type="number" min="1" max="5" value="1"><button class="rateProduct" productId="${value.id}">Rate</button></div>
                                </div>`)
                            });
                            $.each(data['propInfo'], function(propName, info){
                                if(info['type'] == filterTypes.dropdown){
                                    var select = $('select#' + propName + 'Filter');
                                    select.empty();
                                    select.append($('<option>', { 
                                            value: "",
                                            text : "None"
                                    }));
                                    $.each(info['values'], function(_, value){
                                        select.append($('<option>', { 
                                            value: value[propName],
                                            text : value[propName]
                                        }));
                                    });
                                }else if(info['type'] == filterTypes.range){
                                    let min = parseInt(info['values'][0].min||0);
                                    let max = parseInt(info['values'][0].max||1);
                                    let slider = $('div#' + propName + 'Filter' + '.slider')[0];
                                    slider.noUiSlider.updateOptions({
                                        range: {
                                            'min': min,
                                            'max': max
                                        }
                                    });
                                    slider.noUiSlider.set([min, max])
                                }else if(info['type'] == filterTypes.multiDropdown){
                                    var select = $('select#' + propName + 'Filter');
                                    select.empty();
                                    select.append($('<option>', { 
                                            value: "",
                                            text : "None"
                                    }));
                                    $.each(info['values'], function(_, value){
                                        if(value['name'] != null){
                                            select.append($('<option>', { 
                                                value: value['name'],
                                                text : value['name']
                                            }));
                                        }
                                    });
                                }
                            })
                        },
                        error: function(data){
                            errorHandle(data.responseJSON, null)
                        }
                    });
                }
            });